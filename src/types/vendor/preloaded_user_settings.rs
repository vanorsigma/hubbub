// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreloadedUserSettings {
    #[prost(message, optional, tag = "1")]
    pub versions: ::core::option::Option<preloaded_user_settings::Versions>,
    #[prost(message, optional, tag = "2")]
    pub inbox: ::core::option::Option<preloaded_user_settings::InboxSettings>,
    #[prost(message, optional, tag = "3")]
    pub guilds: ::core::option::Option<preloaded_user_settings::AllGuildSettings>,
    #[prost(message, optional, tag = "4")]
    pub user_content: ::core::option::Option<
        preloaded_user_settings::UserContentSettings,
    >,
    #[prost(message, optional, tag = "5")]
    pub voice_and_video: ::core::option::Option<
        preloaded_user_settings::VoiceAndVideoSettings,
    >,
    #[prost(message, optional, tag = "6")]
    pub text_and_images: ::core::option::Option<
        preloaded_user_settings::TextAndImagesSettings,
    >,
    #[prost(message, optional, tag = "7")]
    pub notifications: ::core::option::Option<
        preloaded_user_settings::NotificationSettings,
    >,
    #[prost(message, optional, tag = "8")]
    pub privacy: ::core::option::Option<preloaded_user_settings::PrivacySettings>,
    #[prost(message, optional, tag = "9")]
    pub debug: ::core::option::Option<preloaded_user_settings::DebugSettings>,
    #[prost(message, optional, tag = "10")]
    pub game_library: ::core::option::Option<
        preloaded_user_settings::GameLibrarySettings,
    >,
    #[prost(message, optional, tag = "11")]
    pub status: ::core::option::Option<preloaded_user_settings::StatusSettings>,
    #[prost(message, optional, tag = "12")]
    pub localization: ::core::option::Option<
        preloaded_user_settings::LocalizationSettings,
    >,
    #[prost(message, optional, tag = "13")]
    pub appearance: ::core::option::Option<preloaded_user_settings::AppearanceSettings>,
    #[prost(message, optional, tag = "14")]
    pub guild_folders: ::core::option::Option<preloaded_user_settings::GuildFolders>,
    #[prost(message, optional, tag = "15")]
    pub favorites: ::core::option::Option<preloaded_user_settings::Favorites>,
    #[prost(message, optional, tag = "16")]
    pub audio_context_settings: ::core::option::Option<
        preloaded_user_settings::AudioSettings,
    >,
    #[prost(message, optional, tag = "17")]
    pub communities: ::core::option::Option<
        preloaded_user_settings::CommunitiesSettings,
    >,
    #[prost(message, optional, tag = "18")]
    pub broadcast: ::core::option::Option<preloaded_user_settings::BroadcastSettings>,
    #[prost(message, optional, tag = "19")]
    pub clips: ::core::option::Option<preloaded_user_settings::ClipsSettings>,
}
/// Nested message and enum types in `PreloadedUserSettings`.
pub mod preloaded_user_settings {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Versions {
        #[prost(uint32, tag = "1")]
        pub client_version: u32,
        #[prost(uint32, tag = "2")]
        pub server_version: u32,
        #[prost(uint32, tag = "3")]
        pub data_version: u32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct InboxSettings {
        #[prost(enumeration = "InboxTab", tag = "1")]
        pub current_tab: i32,
        #[prost(bool, tag = "2")]
        pub viewed_tutorial: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChannelIconEmoji {
        #[prost(message, optional, tag = "1")]
        pub id: ::core::option::Option<u64>,
        #[prost(message, optional, tag = "2")]
        pub name: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "3")]
        pub color: ::core::option::Option<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomNotificationSoundConfig {
        #[prost(message, optional, tag = "1")]
        pub notification_sound_pack_id: ::core::option::Option<
            ::prost::alloc::string::String,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChannelSettings {
        #[prost(bool, tag = "1")]
        pub collapsed_in_inbox: bool,
        #[prost(message, optional, tag = "2")]
        pub icon_emoji: ::core::option::Option<ChannelIconEmoji>,
        #[prost(message, optional, tag = "3")]
        pub custom_notification_sound_config: ::core::option::Option<
            CustomNotificationSoundConfig,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomCallSound {
        #[prost(fixed64, tag = "1")]
        pub sound_id: u64,
        #[prost(fixed64, tag = "2")]
        pub guild_id: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChannelListSettings {
        #[prost(message, optional, tag = "1")]
        pub layout: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "2")]
        pub message_previews: ::core::option::Option<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GuildSettings {
        #[prost(map = "fixed64, message", tag = "1")]
        pub channels: ::std::collections::HashMap<u64, ChannelSettings>,
        #[prost(uint32, tag = "2")]
        pub hub_progress: u32,
        #[prost(uint32, tag = "3")]
        pub guild_onboarding_progress: u32,
        #[prost(message, optional, tag = "4")]
        pub guild_recents_dismissed_at: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(bytes = "vec", tag = "5")]
        pub dismissed_guild_content: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "6")]
        pub join_sound: ::core::option::Option<CustomCallSound>,
        #[prost(message, optional, tag = "7")]
        pub mobile_redesign_channel_list_settings: ::core::option::Option<
            ChannelListSettings,
        >,
        #[prost(bool, tag = "8")]
        pub disable_raid_alert_push: bool,
        #[prost(bool, tag = "9")]
        pub disable_raid_alert_nag: bool,
        #[prost(message, optional, tag = "10")]
        pub custom_notification_sound_config: ::core::option::Option<
            CustomNotificationSoundConfig,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AllGuildSettings {
        #[prost(map = "fixed64, message", tag = "1")]
        pub guilds: ::std::collections::HashMap<u64, GuildSettings>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UserContentSettings {
        #[prost(bytes = "vec", tag = "1")]
        pub dismissed_contents: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "2")]
        pub last_dismissed_outbound_promotion_start_date: ::core::option::Option<
            ::prost::alloc::string::String,
        >,
        #[prost(message, optional, tag = "3")]
        pub premium_tier_0_modal_dismissed_at: ::core::option::Option<
            ::prost_types::Timestamp,
        >,
        #[prost(message, optional, tag = "4")]
        pub guild_onboarding_upsell_dismissed_at: ::core::option::Option<
            ::prost_types::Timestamp,
        >,
        #[prost(message, optional, tag = "5")]
        pub safety_user_sentiment_notice_dismissed_at: ::core::option::Option<
            ::prost_types::Timestamp,
        >,
        #[prost(fixed64, tag = "6")]
        pub last_received_changelog_id: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct VideoFilterBackgroundBlur {
        #[prost(bool, tag = "1")]
        pub use_blur: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct VideoFilterAsset {
        #[prost(fixed64, tag = "1")]
        pub id: u64,
        #[prost(string, tag = "2")]
        pub asset_hash: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SoundboardSettings {
        #[prost(float, tag = "1")]
        pub volume: f32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct VoiceAndVideoSettings {
        #[prost(message, optional, tag = "1")]
        pub blur: ::core::option::Option<VideoFilterBackgroundBlur>,
        #[prost(uint32, tag = "2")]
        pub preset_option: u32,
        #[prost(message, optional, tag = "3")]
        pub custom_asset: ::core::option::Option<VideoFilterAsset>,
        #[prost(message, optional, tag = "5")]
        pub always_preview_video: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "6")]
        pub afk_timeout: ::core::option::Option<u32>,
        #[prost(message, optional, tag = "7")]
        pub stream_notifications_enabled: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "8")]
        pub native_phone_integration_enabled: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "9")]
        pub soundboard_settings: ::core::option::Option<SoundboardSettings>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExplicitContentSettings {
        #[prost(enumeration = "ExplicitContentRedaction", tag = "1")]
        pub explicit_content_guilds: i32,
        #[prost(enumeration = "ExplicitContentRedaction", tag = "2")]
        pub explicit_content_friend_dm: i32,
        #[prost(enumeration = "ExplicitContentRedaction", tag = "3")]
        pub explicit_content_non_friend_dm: i32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct KeywordFilterSettings {
        #[prost(message, optional, tag = "1")]
        pub profanity: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "2")]
        pub sexual_content: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "3")]
        pub slurs: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TextAndImagesSettings {
        #[prost(message, optional, tag = "1")]
        pub diversity_surrogate: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "2")]
        pub use_rich_chat_input: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "3")]
        pub use_thread_sidebar: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "4")]
        pub render_spoilers: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "5")]
        pub emoji_picker_collapsed_sections: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
        #[prost(string, repeated, tag = "6")]
        pub sticker_picker_collapsed_sections: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
        #[prost(message, optional, tag = "7")]
        pub view_image_descriptions: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "8")]
        pub show_command_suggestions: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "9")]
        pub inline_attachment_media: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "10")]
        pub inline_embed_media: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "11")]
        pub gif_auto_play: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "12")]
        pub render_embeds: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "13")]
        pub render_reactions: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "14")]
        pub animate_emoji: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "15")]
        pub animate_stickers: ::core::option::Option<u32>,
        #[prost(message, optional, tag = "16")]
        pub enable_tts_command: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "17")]
        pub message_display_compact: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "19")]
        pub explicit_content_filter: ::core::option::Option<u32>,
        #[prost(message, optional, tag = "20")]
        pub view_nsfw_guilds: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "21")]
        pub convert_emoticons: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "22")]
        pub expression_suggestions_enabled: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "23")]
        pub view_nsfw_commands: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "24")]
        pub use_legacy_chat_input: ::core::option::Option<bool>,
        #[prost(string, repeated, tag = "25")]
        pub soundboard_picker_collapsed_sections: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
        #[prost(message, optional, tag = "26")]
        pub dm_spam_filter: ::core::option::Option<u32>,
        #[prost(enumeration = "DmSpamFilterV2", tag = "27")]
        pub dm_spam_filter_v2: i32,
        #[prost(message, optional, tag = "28")]
        pub include_stickers_in_autocomplete: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "29")]
        pub explicit_content_settings: ::core::option::Option<ExplicitContentSettings>,
        #[prost(message, optional, tag = "30")]
        pub keyword_filter_settings: ::core::option::Option<KeywordFilterSettings>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct NotificationSettings {
        #[prost(message, optional, tag = "1")]
        pub show_in_app_notifications: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "2")]
        pub notify_friends_on_go_live: ::core::option::Option<bool>,
        #[prost(fixed64, tag = "3")]
        pub notification_center_acked_before_id: u64,
        #[prost(message, optional, tag = "4")]
        pub enable_burst_reaction_notifications: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "5")]
        pub quiet_mode: ::core::option::Option<bool>,
        #[prost(fixed64, tag = "6")]
        pub focus_mode_expires_at_ms: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PrivacySettings {
        #[prost(message, optional, tag = "1")]
        pub allow_activity_party_privacy_friends: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "2")]
        pub allow_activity_party_privacy_voice_channel: ::core::option::Option<bool>,
        #[prost(fixed64, repeated, tag = "3")]
        pub restricted_guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(bool, tag = "4")]
        pub default_guilds_restricted: bool,
        #[prost(bool, tag = "7")]
        pub allow_accessibility_detection: bool,
        #[prost(message, optional, tag = "8")]
        pub detect_platform_accounts: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "9")]
        pub passwordless: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "10")]
        pub contact_sync_enabled: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "11")]
        pub friend_source_flags: ::core::option::Option<u32>,
        #[prost(message, optional, tag = "12")]
        pub friend_discovery_flags: ::core::option::Option<u32>,
        #[prost(fixed64, repeated, tag = "13")]
        pub activity_restricted_guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(enumeration = "GuildActivityStatusRestrictionDefault", tag = "14")]
        pub default_guilds_activity_restricted: i32,
        #[prost(fixed64, repeated, tag = "15")]
        pub activity_joining_restricted_guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(fixed64, repeated, tag = "16")]
        pub message_request_restricted_guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(message, optional, tag = "17")]
        pub default_message_request_restricted: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "18")]
        pub drops_opted_out: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "19")]
        pub non_spam_retraining_opt_in: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "20")]
        pub family_center_enabled: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "21")]
        pub family_center_enabled_v2: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "22")]
        pub hide_legacy_username: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "23")]
        pub inappropriate_conversation_warnings: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "24")]
        pub recent_games_enabled: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DebugSettings {
        #[prost(message, optional, tag = "1")]
        pub rtc_panel_show_voice_states: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GameLibrarySettings {
        #[prost(message, optional, tag = "1")]
        pub install_shortcut_desktop: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "2")]
        pub install_shortcut_start_menu: ::core::option::Option<bool>,
        #[prost(message, optional, tag = "3")]
        pub disable_games_tab: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomStatus {
        #[prost(string, tag = "1")]
        pub text: ::prost::alloc::string::String,
        #[prost(fixed64, tag = "2")]
        pub emoji_id: u64,
        #[prost(string, tag = "3")]
        pub emoji_name: ::prost::alloc::string::String,
        #[prost(fixed64, tag = "4")]
        pub expires_at_ms: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StatusSettings {
        #[prost(message, optional, tag = "1")]
        pub status: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "2")]
        pub custom_status: ::core::option::Option<CustomStatus>,
        #[prost(message, optional, tag = "3")]
        pub show_current_game: ::core::option::Option<bool>,
        #[prost(fixed64, tag = "4")]
        pub status_expires_at_ms: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct LocalizationSettings {
        #[prost(message, optional, tag = "1")]
        pub locale: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "2")]
        pub timezone_offset: ::core::option::Option<i32>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ClientThemeSettings {
        #[prost(message, optional, tag = "2")]
        pub background_gradient_preset_id: ::core::option::Option<u32>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AppearanceSettings {
        #[prost(enumeration = "Theme", tag = "1")]
        pub theme: i32,
        #[prost(bool, tag = "2")]
        pub developer_mode: bool,
        #[prost(message, optional, tag = "3")]
        pub client_theme_settings: ::core::option::Option<ClientThemeSettings>,
        #[prost(bool, tag = "4")]
        pub mobile_redesign_disabled: bool,
        #[prost(message, optional, tag = "6")]
        pub channel_list_layout: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "7")]
        pub message_previews: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "8")]
        pub search_result_exact_count_enabled: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GuildFolder {
        #[prost(fixed64, repeated, tag = "1")]
        pub guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(message, optional, tag = "2")]
        pub id: ::core::option::Option<i64>,
        #[prost(message, optional, tag = "3")]
        pub name: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(message, optional, tag = "4")]
        pub color: ::core::option::Option<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GuildFolders {
        #[prost(message, repeated, tag = "1")]
        pub folders: ::prost::alloc::vec::Vec<GuildFolder>,
        #[prost(fixed64, repeated, tag = "2")]
        pub guild_positions: ::prost::alloc::vec::Vec<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteChannel {
        #[prost(string, tag = "1")]
        pub nickname: ::prost::alloc::string::String,
        #[prost(enumeration = "FavoriteChannelType", tag = "2")]
        pub r#type: i32,
        #[prost(uint32, tag = "3")]
        pub position: u32,
        #[prost(fixed64, tag = "4")]
        pub parent_id: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Favorites {
        #[prost(map = "fixed64, message", tag = "1")]
        pub favorite_channels: ::std::collections::HashMap<u64, FavoriteChannel>,
        #[prost(bool, tag = "2")]
        pub muted: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AudioContextSetting {
        #[prost(bool, tag = "1")]
        pub muted: bool,
        #[prost(float, tag = "2")]
        pub volume: f32,
        #[prost(fixed64, tag = "3")]
        pub modified_at: u64,
        #[prost(bool, tag = "4")]
        pub soundboard_muted: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AudioSettings {
        #[prost(map = "fixed64, message", tag = "1")]
        pub user: ::std::collections::HashMap<u64, AudioContextSetting>,
        #[prost(map = "fixed64, message", tag = "2")]
        pub stream: ::std::collections::HashMap<u64, AudioContextSetting>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CommunitiesSettings {
        #[prost(message, optional, tag = "1")]
        pub disable_home_auto_nav: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BroadcastSettings {
        #[prost(message, optional, tag = "1")]
        pub allow_friends: ::core::option::Option<bool>,
        #[prost(fixed64, repeated, tag = "2")]
        pub allowed_guild_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(fixed64, repeated, tag = "3")]
        pub allowed_user_ids: ::prost::alloc::vec::Vec<u64>,
        #[prost(message, optional, tag = "4")]
        pub auto_broadcast: ::core::option::Option<bool>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ClipsSettings {
        #[prost(message, optional, tag = "1")]
        pub allow_voice_recording: ::core::option::Option<bool>,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum InboxTab {
        Unspecified = 0,
        Mentions = 1,
        Unreads = 2,
        Todos = 3,
        ForYou = 4,
        GameInvites = 5,
    }
    impl InboxTab {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                InboxTab::Unspecified => "UNSPECIFIED",
                InboxTab::Mentions => "MENTIONS",
                InboxTab::Unreads => "UNREADS",
                InboxTab::Todos => "TODOS",
                InboxTab::ForYou => "FOR_YOU",
                InboxTab::GameInvites => "GAME_INVITES",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "MENTIONS" => Some(Self::Mentions),
                "UNREADS" => Some(Self::Unreads),
                "TODOS" => Some(Self::Todos),
                "FOR_YOU" => Some(Self::ForYou),
                "GAME_INVITES" => Some(Self::GameInvites),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DmSpamFilterV2 {
        DefaultUnset = 0,
        Disabled = 1,
        NonFriends = 2,
        FriendsAndNonFriends = 3,
    }
    impl DmSpamFilterV2 {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                DmSpamFilterV2::DefaultUnset => "DEFAULT_UNSET",
                DmSpamFilterV2::Disabled => "DISABLED",
                DmSpamFilterV2::NonFriends => "NON_FRIENDS",
                DmSpamFilterV2::FriendsAndNonFriends => "FRIENDS_AND_NON_FRIENDS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DEFAULT_UNSET" => Some(Self::DefaultUnset),
                "DISABLED" => Some(Self::Disabled),
                "NON_FRIENDS" => Some(Self::NonFriends),
                "FRIENDS_AND_NON_FRIENDS" => Some(Self::FriendsAndNonFriends),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ExplicitContentRedaction {
        UnsetExplicitContentRedaction = 0,
        Show = 1,
        Blur = 2,
        Block = 3,
    }
    impl ExplicitContentRedaction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ExplicitContentRedaction::UnsetExplicitContentRedaction => {
                    "UNSET_EXPLICIT_CONTENT_REDACTION"
                }
                ExplicitContentRedaction::Show => "SHOW",
                ExplicitContentRedaction::Blur => "BLUR",
                ExplicitContentRedaction::Block => "BLOCK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSET_EXPLICIT_CONTENT_REDACTION" => {
                    Some(Self::UnsetExplicitContentRedaction)
                }
                "SHOW" => Some(Self::Show),
                "BLUR" => Some(Self::Blur),
                "BLOCK" => Some(Self::Block),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum GuildActivityStatusRestrictionDefault {
        Off = 0,
        OnForLargeGuilds = 1,
    }
    impl GuildActivityStatusRestrictionDefault {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                GuildActivityStatusRestrictionDefault::Off => "OFF",
                GuildActivityStatusRestrictionDefault::OnForLargeGuilds => {
                    "ON_FOR_LARGE_GUILDS"
                }
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "OFF" => Some(Self::Off),
                "ON_FOR_LARGE_GUILDS" => Some(Self::OnForLargeGuilds),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Theme {
        Unset = 0,
        Dark = 1,
        Light = 2,
        Darker = 3,
        Midnight = 4,
    }
    impl Theme {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Theme::Unset => "UNSET",
                Theme::Dark => "DARK",
                Theme::Light => "LIGHT",
                Theme::Darker => "DARKER",
                Theme::Midnight => "MIDNIGHT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSET" => Some(Self::Unset),
                "DARK" => Some(Self::Dark),
                "LIGHT" => Some(Self::Light),
                "DARKER" => Some(Self::Darker),
                "MIDNIGHT" => Some(Self::Midnight),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum FavoriteChannelType {
        UnsetFavoriteChannelType = 0,
        ReferenceOriginal = 1,
        Category = 2,
    }
    impl FavoriteChannelType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                FavoriteChannelType::UnsetFavoriteChannelType => {
                    "UNSET_FAVORITE_CHANNEL_TYPE"
                }
                FavoriteChannelType::ReferenceOriginal => "REFERENCE_ORIGINAL",
                FavoriteChannelType::Category => "CATEGORY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSET_FAVORITE_CHANNEL_TYPE" => Some(Self::UnsetFavoriteChannelType),
                "REFERENCE_ORIGINAL" => Some(Self::ReferenceOriginal),
                "CATEGORY" => Some(Self::Category),
                _ => None,
            }
        }
    }
}
