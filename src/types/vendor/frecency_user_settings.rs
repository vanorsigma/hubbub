// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FrecencyUserSettings {
    #[prost(message, optional, tag = "1")]
    pub versions: ::core::option::Option<frecency_user_settings::Versions>,
    #[prost(message, optional, tag = "2")]
    pub favorite_gifs: ::core::option::Option<frecency_user_settings::FavoriteGiFs>,
    #[prost(message, optional, tag = "3")]
    pub favorite_stickers: ::core::option::Option<
        frecency_user_settings::FavoriteStickers,
    >,
    #[prost(message, optional, tag = "4")]
    pub sticker_frecency: ::core::option::Option<
        frecency_user_settings::StickerFrecency,
    >,
    #[prost(message, optional, tag = "5")]
    pub favorite_emojis: ::core::option::Option<frecency_user_settings::FavoriteEmojis>,
    #[prost(message, optional, tag = "6")]
    pub emoji_frecency: ::core::option::Option<frecency_user_settings::EmojiFrecency>,
    #[prost(message, optional, tag = "7")]
    pub application_command_frecency: ::core::option::Option<
        frecency_user_settings::ApplicationCommandFrecency,
    >,
    #[prost(message, optional, tag = "8")]
    pub favorite_soundboard_sounds: ::core::option::Option<
        frecency_user_settings::FavoriteSoundboardSounds,
    >,
    #[prost(message, optional, tag = "9")]
    pub application_frecency: ::core::option::Option<
        frecency_user_settings::ApplicationFrecency,
    >,
    #[prost(message, optional, tag = "10")]
    pub heard_sound_frecency: ::core::option::Option<
        frecency_user_settings::HeardSoundFrecency,
    >,
    #[prost(message, optional, tag = "11")]
    pub played_sound_frecency: ::core::option::Option<
        frecency_user_settings::PlayedSoundFrecency,
    >,
    #[prost(message, optional, tag = "12")]
    pub guild_and_channel_frecency: ::core::option::Option<
        frecency_user_settings::GuildAndChannelFrecency,
    >,
}
/// Nested message and enum types in `FrecencyUserSettings`.
pub mod frecency_user_settings {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Versions {
        #[prost(uint32, tag = "1")]
        pub client_version: u32,
        #[prost(uint32, tag = "2")]
        pub server_version: u32,
        #[prost(uint32, tag = "3")]
        pub data_version: u32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteGif {
        #[prost(enumeration = "GifType", tag = "1")]
        pub format: i32,
        #[prost(string, tag = "2")]
        pub src: ::prost::alloc::string::String,
        #[prost(uint32, tag = "3")]
        pub width: u32,
        #[prost(uint32, tag = "4")]
        pub height: u32,
        #[prost(uint32, tag = "5")]
        pub order: u32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteGiFs {
        #[prost(map = "string, message", tag = "1")]
        pub gifs: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FavoriteGif,
        >,
        #[prost(bool, tag = "2")]
        pub hide_tooltip: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteStickers {
        #[prost(fixed64, repeated, tag = "1")]
        pub sticker_ids: ::prost::alloc::vec::Vec<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FrecencyItem {
        #[prost(uint32, tag = "1")]
        pub total_uses: u32,
        #[prost(uint64, repeated, tag = "2")]
        pub recent_uses: ::prost::alloc::vec::Vec<u64>,
        #[prost(int32, tag = "3")]
        pub frecency: i32,
        #[prost(int32, tag = "4")]
        pub score: i32,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StickerFrecency {
        #[prost(map = "fixed64, message", tag = "1")]
        pub stickers: ::std::collections::HashMap<u64, FrecencyItem>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteEmojis {
        #[prost(string, repeated, tag = "1")]
        pub emojis: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EmojiFrecency {
        #[prost(map = "string, message", tag = "1")]
        pub emojis: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FrecencyItem,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ApplicationCommandFrecency {
        #[prost(map = "string, message", tag = "1")]
        pub application_commands: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FrecencyItem,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FavoriteSoundboardSounds {
        #[prost(fixed64, repeated, tag = "1")]
        pub sound_ids: ::prost::alloc::vec::Vec<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ApplicationFrecency {
        #[prost(map = "string, message", tag = "1")]
        pub applications: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FrecencyItem,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HeardSoundFrecency {
        #[prost(map = "string, message", tag = "1")]
        pub heard_sounds: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FrecencyItem,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PlayedSoundFrecency {
        #[prost(map = "string, message", tag = "1")]
        pub played_sounds: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            FrecencyItem,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GuildAndChannelFrecency {
        #[prost(map = "fixed64, message", tag = "1")]
        pub guild_and_channels: ::std::collections::HashMap<u64, FrecencyItem>,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum GifType {
        None = 0,
        Image = 1,
        Video = 2,
    }
    impl GifType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                GifType::None => "NONE",
                GifType::Image => "IMAGE",
                GifType::Video => "VIDEO",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "IMAGE" => Some(Self::Image),
                "VIDEO" => Some(Self::Video),
                _ => None,
            }
        }
    }
}
